#include <Arduino.h>
#include <SensirionI2CSen5x.h>
#include <SensirionI2CScd4x.h>
#include <Wire.h>

// The used commands use up to 48 bytes. On some Arduino's the default buffer
// space is not large enough
#define MAXBUF_REQUIREMENT 48

SensirionI2CSen5x sen5x;
SensirionI2CScd4x scd4x;

void sen55Setup() {
    uint16_t errorSEN5X;
    char errorSEN5XMessage[256];
    errorSEN5X = sen5x.deviceReset();
    if (errorSEN5X) {
        Serial.print("Error trying to execute deviceReset(): ");
        errorToString(errorSEN5X, errorSEN5XMessage, 256);
        Serial.println(errorSEN5XMessage);
    }

// Print SEN55 module information if i2c buffers are large enough

    float tempOffset = 0.0;
    errorSEN5X = sen5x.setTemperatureOffsetSimple(tempOffset);
    if (errorSEN5X) {
        Serial.print("Error trying to execute setTemperatureOffsetSimple(): ");
        errorToString(errorSEN5X, errorSEN5XMessage, 256);
        Serial.println(errorSEN5XMessage);
    } else {
        Serial.print("Temperature Offset set to ");
        Serial.print(tempOffset);
        Serial.println(" deg. Celsius (SEN54/SEN55 only");
    }

    // Start Measurement
    errorSEN5X = sen5x.startMeasurement();
    if (errorSEN5X) {
        Serial.print("Error trying to execute startMeasurement(): ");
        errorToString(errorSEN5X, errorSEN5XMessage, 256);
        Serial.println(errorSEN5XMessage);
    }
}

void scd40Setup() {
    uint16_t errorSCD40;
    char errorSCD40Message[256];

    // stop potentially previously started measurement
    errorSCD40 = scd4x.stopPeriodicMeasurement();
    if (errorSCD40) {
        Serial.print("errorSCD40 trying to execute stopPeriodicMeasurement(): ");
        errorToString(errorSCD40, errorSCD40Message, 256);
        Serial.println(errorSCD40Message);
    }

    // Start Measurement
    errorSCD40 = scd4x.startPeriodicMeasurement();
    if (errorSCD40) {
        Serial.print("errorSCD40 trying to execute startPeriodicMeasurement(): ");
        errorToString(errorSCD40, errorSCD40Message, 256);
        Serial.println(errorSCD40Message);
    }

    Serial.println("Waiting for first measurement... (5 sec)");
}

void setup() {
    pinMode(7, OUTPUT);
    digitalWrite(7, HIGH);
    Serial.begin(115200);
    while (!Serial) {
        delay(100);
    }

    Wire.begin(1, 0);

    sen5x.begin(Wire);
    scd4x.begin(Wire);

    sen55Setup();
    scd40Setup();
}

void sen55Loop() {
    uint16_t errorSEN5X;
    char errorSEN5XMessage[256];

    delay(1000);

    // Read Measurement
    float massConcentrationPm1p0;
    float massConcentrationPm2p5;
    float massConcentrationPm4p0;
    float massConcentrationPm10p0;
    float ambientHumidity;
    float ambientTemperature;
    float vocIndex;
    float noxIndex;

    errorSEN5X = sen5x.readMeasuredValues(
        massConcentrationPm1p0, massConcentrationPm2p5, massConcentrationPm4p0,
        massConcentrationPm10p0, ambientHumidity, ambientTemperature, vocIndex,
        noxIndex);

    if (errorSEN5X) {
        Serial.print("Error trying to execute readMeasuredValues(): ");
        errorToString(errorSEN5X, errorSEN5XMessage, 256);
        Serial.println(errorSEN5XMessage);
    } else {
        Serial.print("MassConcentrationPm1p0:");
        Serial.print(massConcentrationPm1p0);
        Serial.print("\t");
        Serial.print("MassConcentrationPm2p5:");
        Serial.print(massConcentrationPm2p5);
        Serial.print("\t");
        Serial.print("MassConcentrationPm4p0:");
        Serial.print(massConcentrationPm4p0);
        Serial.print("\t");
        Serial.print("MassConcentrationPm10p0:");
        Serial.print(massConcentrationPm10p0);
        Serial.print("\t");
        Serial.print("AmbientHumidity:");
        if (isnan(ambientHumidity)) {
            Serial.print("n/a");
        } else {
            Serial.print(ambientHumidity);
        }
        Serial.print("\t");
        Serial.print("AmbientTemperature:");
        if (isnan(ambientTemperature)) {
            Serial.print("n/a");
        } else {
            Serial.print(ambientTemperature);
        }
        Serial.print("\t");
        Serial.print("VocIndex:");
        if (isnan(vocIndex)) {
            Serial.print("n/a");
        } else {
            Serial.print(vocIndex);
        }
        Serial.print("\t");
        Serial.print("NoxIndex:");
        if (isnan(noxIndex)) {
            Serial.println("n/a");
        } else {
            Serial.println(noxIndex);
        }
    }
}

void scd40Loop(){
    uint16_t errorSCD40;
    char errorSCD40Message[256];

    delay(100);

    // Read Measurement
    uint16_t co2 = 0;
    float temperature = 0.0f;
    float humidity = 0.0f;
    bool isDataReady = false;
    errorSCD40 = scd4x.getDataReadyFlag(isDataReady);
    if (errorSCD40) {
        Serial.print("errorSCD40 trying to execute readMeasurement(): ");
        errorToString(errorSCD40, errorSCD40Message, 256);
        Serial.println(errorSCD40Message);
        return;
    }
    if (!isDataReady) {
        return;
    }
    errorSCD40 = scd4x.readMeasurement(co2, temperature, humidity);
    if (errorSCD40) {
        Serial.print("errorSCD40 trying to execute readMeasurement(): ");
        errorToString(errorSCD40, errorSCD40Message, 256);
        Serial.println(errorSCD40Message);
    } else if (co2 == 0) {
        Serial.println("Invalid sample detected, skipping.");
    } else {
        Serial.print("Co2:");
        Serial.print(co2);
        Serial.print("\t");
        Serial.print("Temperature:");
        Serial.print(temperature);
        Serial.print("\t");
        Serial.print("Humidity:");
        Serial.println(humidity);
    }
}

void loop() {
    sen55Loop();
    scd40Loop();
}
